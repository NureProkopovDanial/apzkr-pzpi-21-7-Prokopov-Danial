РЕФЕРАТ

Пояснювальна записка з курсової роботи: 28 сторінок, 1 рисунок, 6 джерел. АДМІНІСТРАТОР, БАГАЖ, КОРИСТУВАЧ, ЛІТАК, ПАСАЖИР, .NET, REACT, QR.
У сучасному авіаційному секторі ефективне управління багажем є важливим фактором для забезпечення високого рівня обслуговування пасажирів та оптимізації операційних процесів. Дана робота присвячена розробці інтегрованої системи управління багажем, яка складається з веб-додатку для адміністративного персоналу та мобільного додатку для пасажирів.
Основним завданням веб-додатку є забезпечення централізованого контролю над процесами обробки багажу. Він дозволяє адміністраторам відстежувати місцезнаходження багажу в режимі реального часу, керувати інформацією про пасажирів та їх багаж, а також інтегрувати дані з іншими системами.
Мобільний додаток розроблений для зручності пасажирів, надаючи їм можливість отримувати інформацію про статус їх багажу за допомогою QR-кодів. Він дозволяє пасажирам відстежувати багаж у режимі реального часу, отримувати сповіщення про його місцезнаходження та історію переміщень.
У висновку можна сказати, що створена система є важливим інструментом для модернізації процесів управління багажем в авіаційному секторі. Вона забезпечує високу надійність, прозорість та зручність для всіх учасників процесу, відкриваючи нові можливості для подальшого вдосконалення та розвитку авіаційних послуг. 

1 АНАЛІЗ ПРЕДМЕТНОЇ ГАЛУЗІ

Передумови розробки системи керування багажем в літаках включають наступні аспекти: 
– збільшення потреби в автоматизації: Зі збільшенням обсягів пасажирського та вантажного обігу у повітряному транспорті зростає потреба в ефективній та автоматизованій системі керування багажем для підвищення швидкості та точності операцій;
– покращення безпеки та безпеки багажу: Забезпечення безпеки пасажирів та їх багажу є пріоритетом для авіакомпаній та регулятивних органів;
– підвищення ефективності обслуговування: Ефективне керування багажем дозволяє авіакомпаніям оптимізувати процеси зареєстрованого та не зареєстрованого багажу, зменшити час очікування пасажирів та мінімізувати втрати багажу;
– вимоги регулюючих органів: Авіаційні регулятори можуть встановлювати вимоги щодо систем контролю та відстеження багажу для забезпечення відповідності стандартам безпеки та безпеки в авіації;
– розвиток технологій: Поява нових технологій, таких як RFID (ідентифікація за радіочастотою), IoT (Інтернет речей) та хмарні рішення, надає можливості для розробки більш ефективних та інтегрованих систем керування багажем;
– конкурентний тиск: У сучасному авіаційному секторі конкурентний тиск змушує авіакомпанії постійно шукати способи покращення сервісу та зниження витрат. Ефективне керування багажем може стати одним з ключових конкурентних переваг.

 2 ПОСТАНОВКА ЗАДАЧІ

 2.1 Основний функціонал системи

 Розглянемо потреби користувачів майбутньої системи.
Потреби адміністратора системи:
– моніторинг та управління: Адміністратор системи потребує зручного інтерфейсу для моніторингу та управління потоками багажу в аеропорту;
– аналітика та звітність: Забезпечення інструментів для аналізу даних та створення звітів щодо обсягів та ефективності обробки багажу;
– конфігурування та налаштування: Можливість налаштування системи відповідно до потреб конкретного аеропорту, включаючи робочі процеси та розподіл завдань;
– підтримка та безпека: Забезпечення надійної технічної підтримки та захисту системи від зловживань та кіберзагроз.
Потреби користувача аеропорту:
– швидка та зручна реєстрація багажу: Можливість швидко та легко зареєструвати багаж в аеропорту без зайвого очікування в черзі;
– відстеження багажу: Можливість відстежувати місцезнаходження багажу під час транспортування, щоб мати впевненість у його безпеці та доставці;
– комунікація та підтримка: Можливість отримувати інформацію щодо статусу багажу та звертатися до персоналу аеропорту у разі виникнення питань або проблем;
– простота використання: Забезпечення інтуїтивно зрозумілого та легкого у використанні інтерфейсу для реєстрації багажу та отримання інформації про нього;
– безпека та конфіденційність: Забезпечення захисту персональних даних та конфіденційності інформації про багаж користувача.

 2.2 Припущення та залежності

 Припущення:
– потреба авіакомпаній у автоматизації: Система буде продаватися авіакомпаніям, які прагнуть підвищити ефективність та автоматизувати процеси обліку та обробки багажу;
– зростаючий обсяг пасажиропотоку: Попит на систему буде зростати зі збільшенням кількості пасажирів, які користуються авіаційним транспортом, та зростанням обсягів перевезення багажу;
– підвищення вимог до безпеки: Зростаюча увага до безпеки пасажирів та їх майна створює потребу в надійних системах контролю та відстеження багажу;
– швидкий та надійний обмін даними: Система повинна забезпечити швидкий та надійний обмін даними між різними структурами в аеропорті, такими як термінали реєстрації, сортувальні лінії та автоматичні системи доставки багажу;
– інтеграція з існуючими системами: Припускається, що система керування багажем буде інтегруватися з існуючими системами авіакомпаній, такими як системи реєстрації пасажирів та фінансові системи.
Залежності:
– технологічні засоби: Ефективність системи залежить від наявності та надійності технологічних засобів, таких як сенсори RFID, IoT пристрої та програмне забезпечення для аналізу даних;
– людські ресурси: Успішна реалізація системи вимагає належної підготовки персоналу для управління та підтримки системи;
– правові обмеження: Залежність від відповідності до регулятивних стандартів та вимог щодо захисту персональних даних та безпеки авіаційних операцій;
– фінансові ресурси: Реалізація та підтримка системи вимагає значних фінансових ресурсів для розробки, впровадження та підтримки інфраструктури;
– партнерські відносини: Успішна імплементація системи може залежати від партнерських відносин з постачальниками технологій та інших зацікавлених сторін.

 2.3 Релізи та функціонал

Програмна система повинна мати наступне станом на перший випуск:
– FE-1: Створення літаків, рейсів, багажів, пасажирів, білетів, аеропортів.
– FE-2: Редагування літаків, рейсів, багажів, пасажирів, білетів, аеропортів.
– FE-3: Перегляд літаків, рейсів, багажів, пасажирів, білетів, аеропортів.
– FE-4: Видалення літаків, рейсів, багажів, пасажирів, білетів, аеропортів.
– FE-5: Зв’язок літаків, рейсів, багажів, пасажирів, білетів, аеропортів.
Програмна система в наступних випусках повинна мати:
– FE-6: Перегляд пов’язаних даних про літаків, рейсів, багажів, пасажирів, білетів, аеропортів.
– FE-7: Перегляд користувачем статусу багажу.

 2.4 Користувацькі обмеження

 У зв'язку з особливостями предметної області проекту система має наступні обмеження:
– кожен пасажир може мати лише один багажний квиток на рейс: Це обмеження сприяє уникненню перевантаження та забезпечує оптимальний процес обробки багажу;
– пасажир може відправити лише певний обсяг багажу: Для забезпечення ефективного використання простору та обмеження перевантаження вагонів потяга, обмеження на обсяг багажу, який може бути перевезений кожним пасажиром, встановлюється в межах певних меж;
– кожен багаж повинен мати один унікальний ідентифікатор: Це дозволяє системі однозначно ідентифікувати кожен шматок багажу та відстежувати його переміщення протягом всього процесу перевезення;
– багаж повинен бути зареєстрований та відправлений до пункту призначення разом з пасажиром: Це обмеження забезпечує, що кожен багаж буде перевезений на той самий рейс, що й пасажир, та буде доставлений на правильну станцію місця призначення;
– система повинна забезпечувати конфіденційність та захист даних про багаж: Для захисту персональної інформації пасажирів та забезпечення конфіденційності даних про їх багаж, система повинна дотримуватися всіх відповідних нормативних вимог та стандартів безпеки даних. 

3 ФОРМУВАННЯ ВИМОГ ДО ПРОГРАМНОЇ СИСТЕМИ

3.1 Back-end частина системи


Концептуальне моделювання предметної області є першим і важливим етапом у розробці інформаційних систем, зокрема системи обліку багажу в літаках. Цей етап спрямований на створення абстрактного представлення реальної системи, яке включає основні об'єкти, їх властивості та взаємозв'язки.
Для більш глибшого розуміння функціональності системи обліку багажу в літаках та взаємодії різних користувачів з цією системою, доцільно створити діаграму варіантів використання (Use Case діаграму). Дана діаграма показана на рисунку 1.1. Діаграма варіантів використання дозволяє візуалізувати, які дії можуть виконувати різні типи користувачів (акторів) системи та як ці дії взаємопов'язані. Це допомагає краще зрозуміти вимоги до системи і визначити основні сценарії її використання.
Основними акторами в системі обліку багажу є:
 - пасажир: особа, яка подорожує і може реєструвати багаж;
 - адміністратор системи: користувач, який має повний доступ до системи для управління даними та налаштувань.


3.2 Frontend-частина системи


Даний розділ у системі обліку багажу в літаках включає в себе розгляд архітектури системи, що визначає структуру, компоненти та взаємодію між ними. Для забезпечення ефективного та надійного функціонування системи, архітектурне рішення повинно бути добре продуманим та відповідати потребам користувачів.
Першим етапом розробки є визначення ключових компонентів клієнтської частини системи обліку багажу. Основний компонент - це веб-додаток, який надає адміністраторам можливість здійснювати різноманітні операції, пов'язані з обліком та керуванням багажем. Важливо забезпечити зручний інтерфейс для користувачів, щоб вони могли легко користуватися системою.
Також важливо врахувати масштабованість системи, оскільки обсяги даних про багаж можуть зростати з часом. Архітектура повинна бути розроблена таким чином, щоб забезпечити можливість масштабування та оптимізації продуктивності, наприклад, шляхом використання розподілених систем або кешування даних.
Для реалізації системи обліку багажу в літаках було створено веб-сайт адміністратора. Цей розділ описує процес розробки, вибір технологій, структуру інтерфейсу, а також основні функціональні можливості сайту.
Сайт адміністратора був розроблений з використанням сучасних веб-технологій, які забезпечують високу продуктивність, масштабованість та зручність використання. Для фронтенд-частини було обрано React – популярну бібліотеку для створення користувацьких інтерфейсів. React дозволяє створювати динамічні, інтерактивні компоненти, що значно покращує взаємодію користувача із сайтом. Для управління станом додатку було використано MobX, що дозволяє ефективно управляти даними та станом додатку.
Сайт адміністратора складається з декількох основних розділів, кожен з яких відповідає за певну функціональність системи. Нижче наведено основні розділи сайту та їх короткий опис:
– ерування багажем - розділ, що дозволяє адміністратору додавати, оновлювати та видаляти інформацію про багаж. Тут можна переглядати детальну інформацію про кожен багаж;
– керування рейсами - розділ для управління рейсами, де адміністратор може додавати нові рейси, оновлювати інформацію про існуючі рейси та видаляти рейси;
– керування пасажирами - інтерфейс для роботи з даними пасажирів. Адміністратор може переглядати список пасажирів, їхні контактні дані, інформацію про квитки та багаж;
– керування аеропортами - розділ, що дозволяє адміністратору додавати та оновлювати інформацію про аеропорти, з якими співпрацює авіакомпанія. Тут відображається інформація про термінали, доступні послуги та інфраструктуру.
Створений сайт адміністратора для системи обліку багажу в літаках є важливим інструментом для управління всіма аспектами процесу перевезення багажу.


3.3 IoT частина системи


Розробка мобільного застосунку для системи обліку багажу в літаках була здійснена з використанням передових методик та практик програмування для забезпечення ефективності та коректності функціонування програми.
Під час розробки мобільного додатку було використано модель архітектури MVVM (Model-View-ViewModel), яка дозволяє розділити логіку програми від її представлення та бізнес-логіки. Це сприяє полегшенню тестування та підтримці коду, а також дозволяє забезпечити швидку реакцію на зміни вимог до програмного забезпечення.
Структура додатку включає різні екрани, такі як екран перегляду рейсів, екран деталізованого перегляду рейсу, екран перегляду багажів та екран деталізованого перегляду багажу. Кожен з цих екранів був ретельно розроблений з урахуванням зручності користувача та ефективного відображення інформації.
Функціонал додатку включає можливість перегляду інформації про рейси та багаж, а також пошук багажу за різними критеріями. Користувач може отримати детальну інформацію про конкретний рейс або багаж, включаючи дані про пасажирів та їх багаж.
Під час розробки мобільного застосунку, було інтегровано функціонал для роботи з QR-кодами. QR-коди використовуються для ідентифікації та отримання додаткової інформації про багаж.
На екрані деталізованого перегляду багажу користувач має можливість переглядати QR-код, який асоціюється з конкретним багажем. Цей QR-код містить у собі унікальну інформацію про багаж, таку як його ідентифікатор та додаткові дані.
Інтеграція QR-кодів дозволяє забезпечити зручний та швидкий доступ до даних про багаж, спрощуючи процес взаємодії користувача з мобільним застосунком. Крім того, вона робить процес ідентифікації багажу більш надійним та ефективним, що допомагає уникнути помилок та сприяє збереженню часу та зусиль.

4 СТРУКТУРА БАЗИ ДАНИХ

4.1 ER-моделювання

Побудова бази даних є критично важливим етапом у розробці системи обліку багажу в літаках, оскільки від її структури та оптимізації залежить ефективність і надійність зберігання та обробки даних. 
На цьому етапі важливо визначити основні сутності предметної області, їх атрибути та взаємозв'язки між ними. 
Це дозволить створити логічну модель даних, яка забезпечує цілісність та консистентність інформації в системі. 
Для візуалізації бази даних, було створено ER-діаграму, яка показана на рисунку 1.1.

Рисунок 1.1 – ER-діаграма

– квиток-пасажир-рейс: Взаємозв'язок "багато-до-одного" для пасажирів і рейсів через проміжну таблицю квитків, оскільки один пасажир може мати багато квитків, і один рейс може мати багато пасажирів.

 4.2 Реалізація БД

Для системи обліку багажу в літаках були визначені наступні основні сутності:
– літак: id, виробник, назва моделі, максимальна місткість пасажирів, максимальна вантажопідйомність. Первинний ключ у цієї сутності: id;
– аеропорт: id, назва, адреса, номер телефону. Первинний ключ у цієї сутності: id;
– багаж: id, пасажир, рейс, вага, ширина, довжина, глибина, опис. Первинний ключ у цієї сутності: id;
– рейс: id, номер рейсу, дата та час вильоту, дата та час прибуття, аеропорт вильоту, аеропорт прибуття, літак, нотатки. Первинний ключ у цієї сутності: id;
– пасажир: id, ім’я, прізвище, номер паспорту, дата народження, національність, номер телефону, пошта. Первинний ключ у цієї сутності: id;
– білет: id, пасажир, рейс, ціна. Первинний ключ у цієї сутності: id.
Взаємозв'язки між сутностями:
– багаж-пасажир: взаємозв'язок "один-до-багатьох" оскільки один пасажир може мати кілька багажів, але кожен багаж належить тільки одному пасажиру;
– рейс-багаж: взаємозв'язок "один-до-багатьох" оскільки один рейс може мати кілька багажів, але кожен багаж належить тільки одному рейсу;
– рейс-аеропорт: взаємозв'язок "багато-до-одного" для аеропорту відправлення і прибуття, оскільки один аеропорт може мати багато рейсів, але кожен рейс має тільки один аеропорт відправлення і один аеропорт прибуття;
– рейс-літак: взаємозв'язок "багато-до-одного", оскільки один літак може виконувати багато рейсів, але кожен рейс виконується тільки одним літаком;


5 ОСОБЛИВОСТІ РЕАЛІЗАЦІЇ ПРОГРАМНОГО ЗАБЕЗПЕЧЕННЯ

5.1 Серверна частина

Було створено наступний REST інтерфейс:
Літак:
– GET /api/Aircraft - отримати список літаків;
– POST /api/Aircraft - створити новий літак;
– GET /api/Aircraft/{id} - отримати конкретний літак за його ідентифікатором;
– PUT /api/Aircraft/{id} - оновити інформацію про літак;
– DELETE /api/Aircraft/{id} - видалити літак.
Аеропорт:
– GET /api/Airports - отримати список аеропортів;
– POST /api/Airports - створити новий аеропорт;
– GET /api/Airports/{id} - отримати конкретний аеропорт;
– PUT /api/Airports/{id} - оновити інформацію про аеропорт;
– DELETE /api/Airports/{id} - видалити аеропорт.
Багаж:
– GET /api/Baggages - отримати список багажів;
– POST /api/Baggages - створити новий багаж;
– GET /api/Baggages/{id} - отримати конкретний багаж;
– PUT /api/Baggages/{id} - оновити інформацію про багаж;
– DELETE /api/Baggages/{id} - видалити багаж;
– GET /api/Baggages/code/{id} - отримати фото QR-коду багажу.
Рейс:
– GET /api/Flights - отримати список рейсів;
– POST /api/Flights - створити новий рейс;
– GET /api/Flights/{id} - отримати конкретний рейс за його ідентифікатором;
– PUT /api/Flights/{id} - оновити інформацію про рейс;
– DELETE /api/Flights/{id} - видалити рейс.
Пасажир:
– GET /api/Passengers – отримати список пасажирів;
– POST /api/Passengers - створити нового пасажира;
– GET /api/Passengers/{id} - отримати конкретного пасажира за його ідентифікатором;
– PUT /api/Passengers/{id} - оновити інформацію про пасажира;
– DELETE /api/Passengers/{id} - видалити пасажира;
Білет:
– GET /api/Tickets - отримати список квитків;
– POST /api/Tickets - створити новий квиток;
– GET /api/Tickets/{id} - отримати конкретний квиток за його ідентифікатором;
– PUT /api/Tickets/{id} - оновити інформацію про квиток;
– DELETE /api/Tickets/{id} - видалити квиток.
Налаштовано середовище розробки, яке включає встановлення необхідних інструментів та фреймворків, таких як .NET Core, ASP.NET Core та Entity Framework. Після цього створено базу даних у вибраній системі управління базами даних та реалізовано відповідні таблиці.

5.2 Frontend

У розробці веб-частини для системи адміністрування обліку багажу в літаках використовуються сучасні технології та фреймворки, які забезпечують ефективну роботу і зручний інтерфейс для користувачів. Нижче наведено основні технології, що використовуються для реалізації веб-інтерфейсу адміністрування.
React - це бібліотека JavaScript для створення користувацьких інтерфейсів, розроблена компанією Facebook. Чому вибрано: React забезпечує високу продуктивність завдяки віртуальному DOM, а також дозволяє створювати компонентну архітектуру, що значно спрощує розробку і підтримку складних інтерфейсів.
TypeScript - це надбудова над JavaScript, яка додає статичну типізацію до мови. Чому вибрано: Використання TypeScript дозволяє виявляти помилки на етапі компіляції, що підвищує надійність коду і полегшує процес розробки.
Bootstrap - це популярний фреймворк CSS для розробки адаптивних і мобільних веб-сайтів. Чому вибрано: Bootstrap забезпечує швидку і легку розробку адаптивних інтерфейсів завдяки великій кількості готових компонентів і стилів.
Як інструмент для розробки та розгортання було використано Visual Studio Code. Чому вибрано: Visual Studio Code забезпечує зручне середовище для розробки з підтримкою налагодження, інтеграції з системами контролю версій, а також широким набором розширень для різних мов і фреймворків.
У системі існує компонент Navbar (див. додаток А.1), який використовується для створення навігаційної панелі веб-додатку "AirTrack". Давайте детально розглянемо цей компонент.
Інтерфейс IProps - цей інтерфейс визначає тип пропсів, які приймає компонент Navbar. Він очікує, що в пропсах буде властивість children, яке може бути будь-якого типу, сумісного з ReactNode.
Інтерфейс ILink - цей інтерфейс описує структуру об'єктів, що представляють посилання в навігаційній панелі. Кожне посилання має URL (link), текст для відображення (text).
Константа applicationLinks - це масив об'єктів, що відповідають інтерфейсу ILink, який містить інформацію про маршрути і текстові мітки для різних розділів веб-додатку.
Компонент Navbar є функціональним компонентом React, який створює навігаційну панель з використанням класів Bootstrap для стилізації.
Цей компонент надає зручний і інтуїтивно зрозумілий інтерфейс для навігації по різних розділах системи адміністрування. Використання React і Bootstrap [4] забезпечує адаптивність і зручність використання на різних пристроях, включаючи мобільні.

5.3 Мобільний застосунок

Для розробки мобільного застосунку були використані наступні технології:
– .NET: Основна платформа, на якій ґрунтується розробка, використовуючи мову програмування C#;
– Xamarin.Forms: Фреймворк для розробки крос-платформних мобільних додатків за допомогою мови програмування C#. Xamarin.Forms дозволяє створювати єдиний код, який може бути використаний для побудови додатків для платформ Android, iOS та Windows;
– microsoft.Extensions.DependencyInjection: Ця бібліотека використовується для реалізації інверсії управління та внедрення залежностей в додатку. Вона дозволяє ефективно організувати структуру додатку та забезпечити його модульність та розширюваність;
– newtonsoft.Json: Бібліотека для роботи з форматом JSON в .NET. Вона використовується для серіалізації та десеріалізації даних між сервером і клієнтом у форматі JSON.
Додатково до зазначених технологій, для розробки мобільного застосунку використовувався Visual Studio 2022 - інтегроване середовище розробки (IDE) від Microsoft. Visual Studio 2022 надає розширені засоби для створення, налагодження та тестування програмного забезпечення на платформах .NET та Xamarin. 
Завдяки своєму функціоналу, Visual Studio допомагає розробникам підтримувати високу продуктивність та забезпечує швидку реалізацію проектів. 
Також використання Visual Studio 2022 сприяє забезпеченню сумісності з найновішими версіями .NET та Xamarin, що дозволяє користуватися перевагами оновлень та нововведень у сфері розробки програмного забезпечення.
Використання цих технологій дозволило розробити мобільний застосунок з ефективним та зручним інтерфейсом, який відповідає вимогам функціональності та продуктивності.

6 ОСОБЛИВОСТІ ЗАСТОСУВАННЯ

6.1 Веб додаток

Веб-додаток є ключовим компонентом системи управління багажем, що дозволяє ефективно керувати літаками, пасажирами та їх багажем. За допомогою веб-додатку адміністративний персонал може здійснювати контроль і управління всіма аспектами перевезення багажу.
Інтерфейс веб-додатку надає доступ до інформації про розташування кожного багажного місця в реальному часі, стану його обробки, а також дозволяє відстежувати маршрути руху багажу від моменту його реєстрації до доставки до кінцевого пункту призначення.
Крім того, веб-додаток забезпечує централізоване управління даними про пасажирів і їх багаж, що включає реєстрацію, внесення змін, перевірку статусу багажу, а також обробку запитів на його пошук у разі втрати.
Інтеграція з іншими системами, такими як система бронювання авіаквитків та служба безпеки аеропорту, дозволяє забезпечити безперебійну роботу всіх підрозділів і служб, залучених у процес управління багажем.

6.2 Мобільний додаток


Мобільний додаток є важливим інструментом для пасажирів, який надає зручний доступ до інформації про їх багаж та дозволяє ефективно взаємодіяти з системою управління багажем. Основною функцією мобільного додатку є надання QR-коду користувачу, який ідентифікує його багаж. Цей QR-код генерується під час реєстрації багажу і містить унікальну інформацію, яка дозволяє відстежувати його місцезнаходження в будь-який момент.
За допомогою мобільного додатку пасажири можуть отримувати повідомлення про статус їх багажу, включаючи підтвердження його реєстрації, інформацію про завантаження на борт літака, а також сповіщення про прибуття багажу до пункту призначення. 
У разі виникнення проблем, таких як затримка або втрата багажу, пасажири можуть швидко повідомити про це через мобільний додаток та отримати оперативну допомогу.
Мобільний додаток також надає пасажирам можливість переглядати історію переміщень їх багажу, що забезпечує додаткову прозорість та впевненість у його безпеці.
Інтеграція з іншими сервісами, такими як електронна реєстрація на рейс і доступ до посадкового талону, робить мобільний додаток універсальним інструментом для покращення обслуговування пасажирів та підвищення їх задоволеності.

ВИСНОВКИ

У ході даної роботи було розроблено комплексну систему управління багажем, яка включає веб-додаток для адміністраторів та мобільний додаток для пасажирів. Веб-додаток надає можливості ефективного керування літаками, пасажирами та їх багажем, забезпечуючи централізоване управління та відстеження всіх процесів, пов’язаних з обробкою багажу. Мобільний додаток, у свою чергу, значно покращує взаємодію пасажирів із системою, надаючи їм зручний доступ до інформації про їх багаж через QR-коди та сповіщення про статус багажу.
Розробка даної системи дозволяє значно підвищити ефективність управління багажем, мінімізуючи ризики його втрати або затримки. Система забезпечує високу безпеку багажу та персональних даних користувачів, відповідаючи сучасним стандартам захисту інформації. Впровадження такої системи сприятиме оптимізації роботи авіакомпаній та аеропортів, підвищенню рівня обслуговування пасажирів та їх задоволеності.
Загалом, створена система управління багажем є важливим кроком до модернізації процесів в авіаційній галузі, що забезпечує надійність, прозорість та зручність для всіх учасників процесу. Ця робота демонструє потенціал сучасних технологій у вирішенні актуальних проблем управління багажем, відкриваючи нові можливості для подальшого вдосконалення та розвитку авіаційних послуг.


ПЕРЕЛІК ДЖЕРЕЛ

# 1.

Матеріали лекцій з дисципліни «Архітектура програмного забезпечення».

# 2.	

C# [Електронний ресурс]: https://metanit.com/sharp/tutorial/1.1.php.

# 3.	

Entity Framwork Core [Електронний ресурс]: https://metanit.com/sharp/entityframeworkcore/. (дата звернення 01.05.2024)

# 4.	

ASP.NET Core 5 [Електронний ресурс]: https://metanit.com/sharp/aspnet5/.(дата звернення 01.05.2024)

# 5.	

Xamarin Documentation [Електронник ресурс]: https://docs.microsoft.com/en-us/xamarin/ . (дата звернення 01.05.2024)

# 6.	

Newtonsoft.Json Documentation [Електронник ресурс]: https://www.newtonsoft.com/json. (дата звернення 01.05.2024)

# 7.	

Visual Studio Documentation [Електронник ресурс]: https://docs.microsoft.com/en-us/visualstudio/ . (дата звернення 01.05.2024)

Посилання на відеозапис на YouTube:https://youtu.be/eT8xsN1-Q3U
